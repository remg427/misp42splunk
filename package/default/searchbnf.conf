##################
# mispgetioc
##################
[mispgetioc-command]
syntax = | mispgetioc <mispgetioc-options> 
shortdesc = Retrieve attributes of matching events in MISP instance. Must provide either option "json_request", "date", "eventid", "last", "publish_timestamp" or "timestamp".
description = mispgetioc searches for matching attributes in MISP instance.\
  You can filter on "category" or "type" of attributes, on attributes having the "to_ids" flag set\
  or specific "tags" or not having tags "not_tags".\
usage = public
example1 = | mispgetioc misp_instance=test last=10d limit=0
comment1 = Retrieve attributes of all events published in last 10 days.
example2 = | mispgetioc misp_instance=test date="2023-01-01,2023-01-31" category="Payload delivery,Network%" type=ip-dst to_ids=TRUE
comment2 = Retrieve up to first 1000 (default limit) attributes from events having event date set between 2023-01-01 and 2023-01-31, attributes of type 'ip-dst', and categories 'Payload delivery' or starting with 'Network' and with the flag "to_ids" set.
related = misp
tags = misp

[mispgetioc-options]
syntax = misp_instance=<string> json_request=<JSON> date=<YYYY-MM-DD[,YYYY-MM-DD]> eventid=<id1,id2,...> \
  last=<int>d|h|m publish_timestamp=<int>d|h|m timestamp=<int>d|h|m \
  category=<CSV string> decay_score_threshold=<int> decaying_model=<int> exclude_decayed=<bool> expand_object=<bool> \
  geteventtag=<bool> include_decay_score=<bool> include_deleted=<bool> include_sightings=<bool> limit=<int> \
  not_tags=<CSV string> output=<fields|json> page=<int> pipesplit=<bool> prefix=<string> tags=<CSV string> \
  threat_level_id=<int> to_ids=<bool> type=<CSV string> warning_list=<bool>
   

##################
# mispsearch
##################
[mispsearch-command]
syntax    = mispsearch <mispsearch-options>
shortdesc = Search in MISP for attributes having the value of field
description = Search in MISP for attributes having the value of field - 
example1 = | mispsearch misp_instance=test field=clientip prefix="misp_dev_"
comment1 = Retrieve attributes properties (attribute uuid, event_id, type, category, to_ids flag) for matching values of field clientip 
example2 = ... | field ip | mispsearch misp_instance=test field=ip misp_instance=ops misp_http_body="{\"returnFormat\": \"json\", \"withAttachments\": \"false\", \"includeEventUuid\": \"true\", \"includeEventTags\": \"true\"}"
comment2 = Use a JSON request body for customised search (it is much simpler to prepare a field misp_http_body before) 

[mispsearch-options]
syntax = misp_instance=<string> field=<string> misp_http_body=<string>
  limit=<int> not_tags=<string> page=<int> pipesplit=<bool> prefix=<string> tags=<string>

description = mispsearch takes the value of fieldname and searches in MISP instance for matching attributes.

##################
# mispgetevent
##################
[mispgetevent-command]
syntax = |mispgetevent <mispgetevent-options> 
shortdesc = Retrieve events in MISP instance. Must provide either option "timestamp", "eventid", "publish_timestamp", "date" or "json_request".
description = mispgetevent searches in MISP instance matching events\
  You can filter on "category" or "type" of attributes, or specific "tags" or "not_tags".\
  You may display the attribute uuid (getuuid: default=FALSE) or creating org (getorg: default=FALSE)
usage = public
example1 = | mispgetevent misp_instance=test timestamp=10d
comment1 = Retrieve events changed in last 10 days. you can use range e.g. "14d,7d"
example2 = | mispgetevent misp_instance=test timestamp=10d category="Payload delivery,Network%" type=ip-dst
comment2 = Retrieve events edited in last 10 days with attributes of type 'ip-dst' and categories 'Payload delivery' or starting by 'Network'.
example3 = | mispgetevent misp_instance=test eventid="123,124,678"
comment3 = Retrieve event with id 123, 124 & 678. you can mix id and uuid.
example4 = | mispgetevent misp_instance=test publish_timestamp="14d,7d"
comment4 = Retrieve events published between last 14 and 7 days.
related = misp
tags = misp

[mispgetevent-options]
syntax = misp_instance=<string> json_request=<JSON> date=<YYYY-MM-DD[,YYYY-MM-DD]> eventid=<id1,id2,...> \
  last=<int>d|h|m publish_timestamp=<int>d|h|m timestamp=<int>d|h|m \
   category=<CSV string> expand_object=<bool> getioc=<bool> include_sightings=<bool> keep_galaxy=<bool> \
   keep_related=<bool> limit=<int> not_tags=<CSV string> output=<fields|json> page=<int> pipesplit=<bool> \
   prefix=<string> published=<bool> tags=<CSV string> threat_level_id=<int> to_ids=<bool> \
   type=<CSV string> warning_list=<bool>


##################
# mispfetch
##################
[mispfetch-command]
syntax = | mispfetch <mispfetch-options> 
shortdesc = Streaming command to retrieve events or attributes from MISP instance. 
description = mispfetch pulls events and/or attributes from MISP instance \
  Define your MISP instances as input. limit is set by default to 1000.\
  You can filter on "category" or "type" of attributes, or specific "tags" or on contrary not having "not_tags".\
  To return also attribute values when searching MISP events, use getioc=True \
  To split multivalue attributes into 2 fields set boolean pipesplit=True. \
  For example domain|ip will be split into misp_domain and misp_ip \
  but misp_type and misp_value will still have the original values. 
usage = public
example1 = | mispfetch misp_instance=misp_instance_name getioc=1 limit=100 attribute_limit=1000
comment1 = Retrieve 100 events published in last 1 day (default). For each MISP event, return up to 1000 attributes.
related = misp
tags = misp

[mispfetch-options]
syntax = misp_instance=<string> misp_restsearch=<string> misp_http_body=<string> misp_output_mode=<string> \
  attribute_limit=<int> expand_object=<bool> getioc=<bool> keep_galaxy=<bool> keep_related=<bool> limit=<int>  \
  not_tags=<string> page=<int> pipesplit=<bool> prefix=<string> tags=<string>

##################
# misprest
##################
[misprest-command]
syntax = | misprest <misprest-options> 
shortdesc = This custom command is a wrapper to call MISP API endpoints. 
description = MISP REST API wrapper: provide misp_instance, method, target and a valid JSON request. (don't forget to escape " like this \")
usage = public
example1 = | misprest misp_instance=test method=POST target="/attributes/restSearch" json_request="{\"returnFormat\": \"json\", \"last\": \"20d\"}"
comment1 = retrieve MISP attributes of all events published in last 20 days and display as events
related = misp
tags = misp

[misprest-options]
syntax = misp_instance=<string> method=<string> target=<string> \
  json_request=<string> limit=<int> page=<int> append=<bool>
